@page "/matches/delete"
@using Microsoft.EntityFrameworkCore
@using DataAcess
@inject IDbContextFactory<FootballManagementSystem.Data.FootballManagementSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Match</h2>
    <hr />
    @if (match is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FinalScore</dt>
            <dd class="col-sm-10">@match.FinalScore</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HomeTeamScore</dt>
            <dd class="col-sm-10">@match.HomeTeamScore</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AwayTeamScore</dt>
            <dd class="col-sm-10">@match.AwayTeamScore</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AwayTeamName</dt>
            <dd class="col-sm-10">@match.AwayTeamName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">HomeTeamName</dt>
            <dd class="col-sm-10">@match.HomeTeamName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StadiumID</dt>
            <dd class="col-sm-10">@match.StadiumID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TeamID</dt>
            <dd class="col-sm-10">@match.TeamID</dd>
        </dl>
        <EditForm method="post" Model="match" OnValidSubmit="DeleteMatch" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(match is null)">Delete</button> |
            <a href="/matches">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Match? match;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        match = await context.Match.FirstOrDefaultAsync(m => m.ID == ID);

        if (match is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteMatch()
    {
        using var context = DbFactory.CreateDbContext();
        context.Match.Remove(match!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/matches");
    }
}
